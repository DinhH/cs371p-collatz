        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2016
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:// cache size is ~ 2^10
        -:   18:#define C_SIZE 1000000
        -:   19:
        -:   20:#include "Collatz.h"
        -:   21:
        -:   22:using namespace std;
        -:   23:
        -:   24:int cache[C_SIZE];
        -:   25:
        -:   26:// ------------
        -:   27:// collatz_read
        -:   28:// ------------
        -:   29:
function _Z12collatz_readRSiRiS0_ called 6 returned 100% blocks executed 100%
        6:   30:bool collatz_read (istream& r, int& i, int& j) {
        6:   31:    if (!(r >> i))
call    0 returned 100%
call    1 returned 100%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        1:   32:        return false;
        5:   33:    r >> j;
call    0 returned 100%
        5:   34:    return true;}
        -:   35:
        -:   36:// ------------
        -:   37:// collatz_eval
        -:   38:// ------------
        -:   39:
function _Z12collatz_evalii called 8 returned 100% blocks executed 96%
        8:   40:int collatz_eval (int i, int j) {
        8:   41:  int lower = i;
        8:   42:  int upper = j;
        8:   43:  int max = 0;
        8:   44:  int count = 0;
        -:   45:  unsigned int y;
        -:   46:
        -:   47:   //Starts the loop at lower value.
        8:   48:  if(i > j) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   49:      lower = j;
    #####:   50:      upper = i;
        -:   51:  }
        -:   52:  //Initialize a temporary value that holes the lower value.
        8:   53:  int temp = upper / 2 + 1;
        8:   54:  if(temp > lower)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        4:   55:      lower = temp;
      440:   56:  for(int k = lower; k <= upper; k++) {
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
      432:   57:      count = 1;
      432:   58:      y = k;
     6310:   59:      while(y > 1) {
branch  0 taken 87% (fallthrough)
branch  1 taken 13%
        -:   60:          //make sure that y is within the bound.
     2939:   61:          if(y > 0 && y < C_SIZE && cache[y] != 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 15% (fallthrough)
branch  5 taken 85%
        -:   62:               //if we found the value in the cache, we need to add it.
      429:   63:              count += cache[y] - 1;
      429:   64:              y = 1;
        -:   65:          }
        -:   66:          //the simple algorithm for Collatz.
        -:   67:          else {
     2510:   68:              if(y % 2 == 0)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
     1668:   69:                  y = y / 2;
        -:   70:              else
      842:   71:                  y = 3 * y + 1;
     2510:   72:              count += 1;
        -:   73:          }
        -:   74:      }
        -:   75:       //we need to cache the value of the current set.
      432:   76:      if(k >= 0 && k < C_SIZE)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
      432:   77:          cache[k] = count;
        -:   78:       //count = max.
      432:   79:      if(count > max)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       34:   80:          max = count;
        -:   81:  }
        8:   82:  return max;
        -:   83:}
        -:   84:
        -:   85:// -------------
        -:   86:// collatz_print
        -:   87:// -------------
        -:   88:
function _Z13collatz_printRSoiii called 5 returned 100% blocks executed 100%
        5:   89:void collatz_print (ostream& w, int i, int j, int v) {
        5:   90:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   91:
        -:   92:// -------------
        -:   93:// collatz_solve
        -:   94:// -------------
        -:   95:
function _Z13collatz_solveRSiRSo called 1 returned 100% blocks executed 100%
        5:   96:void collatz_solve (istream& r, ostream& w) {
        -:   97:    int i;
        -:   98:    int j;
        9:   99:    while (collatz_read(r, i, j)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
branch  3 taken 80% (fallthrough)
branch  4 taken 20%
        4:  100:        const int v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I_cache called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        8:  101:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
